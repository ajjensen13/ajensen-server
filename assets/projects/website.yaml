- id: ajensen-client
  title: Personal Website
  summary: Created ajensen.dev
  contentMarkdown: |+
    ## Description ##
    I created this website to showcase my professional skills and personal projects.

    ## Technical Details ##
    The website is built using Angular and is hosted in a Kubernetes cluster in Google
    Cloud (GKE). It talks to a RESTful Web API server written in Go.

    ## Links ##
    * **Source Code:** [github.com/ajjensen13/ajensen-server](https://github.com/ajjensen13/ajensen-client)
    * **TeamCity Project:** [ajensen-1993/ajensen-client](https://teamcity.ajensen.dev/project.html?projectId=Ajensen1993_AjensenClient&tab=projectOverview)

  tags:
  - angular
  - kubernetes
  - docker
  - helm
  - teamcity
  - typescript
  - webstorm
  - gke
  - google-cloud
  startDate: 2020-05-14
  endDate: ~
  color: "#789174"
- id: ajensen-server
  parent: ajensen-client
  summary: Created ajensen-server
  title: Personal Website (Backend)
  contentMarkdown: |+
    ## Description ##
    Instead of hardcoding data into this website, I created a backend web server.

    This allowed me to showcase networking in Kubernetes, and allowed me to easily
    create and parse the sites content in YAML. This had a number of benefits, but
    being able to write Markdown directly in configuration files without special
    formatting was the main draw.

    ## Technical Details ##
    The web server is written in Go and uses the [gin-gonic](https://pkg.go.dev/github.com/gin-gonic/gin?tab=doc)
    web framework. It is hosted in a Kubernetes cluster in Google Cloud (GKE).

    ## Links ##
    * **Source Code:** [github.com/ajjensen13/ajensen-server](https://github.com/ajjensen13/ajensen-server)
    * **Documentation:** [github.com/ajjensen13/ajensen-server](https://pkg.go.dev/github.com/ajjensen13/ajensen-server?tab=doc)
    * **TeamCity Project:** [ajensen-1993/ajensen-server](https://teamcity.ajensen.dev/project.html?projectId=Ajensen1993_AjensenServer&tab=projectOverview)

  tags:
  - go
  - kubernetes
  - docker
  - helm
  - goland
  - web-services
  - restful-api
  - gke
  - google-cloud
  startDate: 2020-05-12
  endDate: 2020-05-22
  color: "#789174"
- id: rproxy
  title: Reverse Proxy
  summary: Created rproxy
  contentMarkdown: |+
    ## Description ##
    I created a simple reverse proxy application that allows me
    to easily route traffic to different Kubernetes services.

    It was relatively straight-forward to implement using the
    [httputils](https://pkg.go.dev/net/http/httputil?tab=doc#ReverseProxy) package
    from the golang standard library.

    I decided to develop a custom implementation rather than using
    a standard nginx image for a few reasons:

    1. I wanted a simple and straight-forward Go application to test my TeamCity build agents with.
    2. I plan to implement an adaptive Single-Page-App server that uses machine learning to push
    assets to clients. I want to detect what files to push by monitoring requests that happen within
    a single HTTP keep-alive connection. I'll likely add this tracking to the reverse-proxy layer.

    ## Links ##
    * **Source Code:** [github.com/ajjensen13/rproxy](https://github.com/ajjensen13/rproxy)

  tags:
  - go
  - kubernetes
  - docker
  - helm
  - goland
  - gke
  - google-cloud
  startDate: 2020-05-01
  endDate: 2020-05-13
  color: "#789174"